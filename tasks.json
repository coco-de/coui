{
  "tasks": [
    {
      "id": "a479e367-b0e7-4a68-9bd8-98c8d9fad946",
      "name": "메모리/리스너 안전성 정리 (controllers/listeners add-remove 대칭)",
      "description": "State 기반 위젯 전반에서 내부 생성 컨트롤러/리스너 소유권을 명확히 하고 add/remove 대칭을 보장. 외부 주입 시 unlisten만 수행. 대상: FocusNode, ScrollController, AnimationController, ValueNotifier, Mouse/Popover controllers.",
      "status": "in_progress",
      "dependencies": [],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:23:28.685Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/components/select.dart",
          "type": "TO_MODIFY",
          "description": "리스너/소유권 헬퍼 최초 적용 파일"
        },
        {
          "path": "packages/coui_flutterlib/src/components/*.dart",
          "type": "TO_MODIFY",
          "description": "다른 컴포넌트 State에 동일 패턴 확산"
        },
        {
          "path": "packages/coui_flutterlib/src/utils/*.dart",
          "type": "REFERENCE",
          "description": "공통 헬퍼 추출 시 위치 후보"
        }
      ],
      "implementationGuide": "1) 각 State에서 내부 생성 여부를 추적하는 플래그/참조 필드(_listenedXxx) 도입\n2) initState/didUpdateWidget에서 _listen/_unlisten 헬퍼로 addListener 대칭 구성\n3) dispose에서 _unlisten + 내부 생성된 컨트롤러만 dispose\n4) select.dart 패턴을 공통화하여 반복 적용(필요 시 mixin 또는 utils 헬퍼로 추출)",
      "verificationCriteria": "DCM에서 memory-leak/always-remove-listener 류 경고 0, 모든 State에 대해 내부 생성만 dispose, 외부 주입 컨트롤러는 unlisten 처리",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "875c2a41-a382-43b3-a434-36dceb1c094f",
      "name": "타입/제네릭 안전성 마무리 (dynamic 제거, 컬렉션 비교 안전화)",
      "description": "남은 dynamic 제네릭 제거 및 Object?로 범위 한정. 리스트/셋 동등 비교는 listEquals/SetEquality로 통일, firstOrNull 등 안전 접근 도입.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/**/*.dart",
          "type": "TO_MODIFY",
          "description": "전역 타입/제네릭 안전화 적용"
        }
      ],
      "implementationGuide": "1) grep으로 dynamic 검색 후 파일별 교체\n2) 컬렉션 비교 연산자 == 제거 → listEquals/SetEquality\n3) .first/.last 직접 접근 제거 → firstOrNull/lastOrNull\n4) DCM 재분석으로 누락 점검",
      "verificationCriteria": "Theme/Components/Utils 전역에서 dynamic 사용 0, 컬렉션 동등 비교 관련 경고 0",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "3088b4d1-5490-492e-9278-35c5046455c4",
      "name": "레이아웃/표현식 정리 (Flex(spacing:) 제거, precedence/dup 표현)",
      "description": "남은 Flex(spacing:) 전량 제거하고 Row/Column + separatedBy로 교체. 논리식에 괄호로 우선순위 명시, 중복 표현식 제거.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/**/*.dart",
          "type": "TO_MODIFY",
          "description": "레이아웃/표현식 개선"
        }
      ],
      "implementationGuide": "1) Flex(spacing:) grep → 해당 위젯을 Row/Column으로 교체, gap은 SizedBox + separatedBy\n2) 논리식/삼항식 괄호 보강, 중복 컬렉션/표현식 추출",
      "verificationCriteria": "Flex(spacing:) 사용 0, precedence 관련 경고 0, duplicate-expression 경고 0",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "7008cb35-ac2e-4100-8157-dadaebf38571",
      "name": "API 안정성: 공개 API는 deprecate, 내부 API 즉시 정리",
      "description": "avoid_positional_boolean_parameters, prefer_constructors_over_static_methods 등 공개 API 변경 위험 항목은 @Deprecated로 새 시그니처 병행 제공. 내부/비공개 API는 즉시 변경.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "875c2a41-a382-43b3-a434-36dceb1c094f"
        }
      ],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/components/**/*.dart",
          "type": "TO_MODIFY",
          "description": "공개 API 점검 및 deprecate 적용"
        },
        {
          "path": "packages/coui_flutterCHANGELOG.md",
          "type": "TO_MODIFY",
          "description": "변경사항/마이그레이션 가이드 추가"
        }
      ],
      "implementationGuide": "1) 공개 위젯 생성자/메서드 파라미터에서 positional bool → named로 신규 오버로드 제공 + @Deprecated\n2) static 공장 메서드는 const/factory 생성자 도입, 기존은 @Deprecated로 위임\n3) CHANGELOG/마이그레이션 가이드 추가",
      "verificationCriteria": "Analyzer에서 해당 규칙 경고 0 또는 Deprecated 경고만 남고, 빌드/테스트 통과",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "71d61029-7952-4462-8095-84255dc79dd2",
      "name": "DateFormat/문자열 포맷 일원화 및 toString 안전화",
      "description": "DateTime.toString 직접 사용 제거, Intl DateFormat 사용. toString 오버라이드에 널 보간/국제화 고려.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/**/*.dart",
          "type": "TO_MODIFY",
          "description": "날짜 포맷/toString 개선"
        }
      ],
      "implementationGuide": "1) 날짜 문자열 출력 지점 grep → DateFormat 적용\n2) toString 오버라이드에서 null-safe 처리 및 ISO 포맷 사용",
      "verificationCriteria": "prefer-date-format 경고 0, toString 관련 nullable interpolation 경고 0",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "d11d8008-5735-4f84-8212-c5f6fa049ff6",
      "name": "ignore 문서화/정리 (document_ignores)",
      "description": "line/file ignore 위에 what/why 사유를 한 줄 주석으로 명시하고, 불필요한 ignore 제거.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutterlib/src/**/*.dart",
          "type": "TO_MODIFY",
          "description": "ignore 사유 문서화"
        }
      ],
      "implementationGuide": "1) document_ignores 경고 파일 수집\n2) 각 ignore 바로 윗줄에 사유 주석 추가(프로젝트 규칙에 맞춰)\n3) 불필요 ignore는 삭제",
      "verificationCriteria": "document_ignores 경고 0",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    },
    {
      "id": "65eb9f30-ed40-45cd-b8b5-0374c5fc5a25",
      "name": "포맷/재분석/테스트 파이프라인 자동화",
      "description": "배치 작업 후 dart format(80), dcm analyze, dart analyze, flutter test를 순번대로 실행해 회귀를 탐지.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "a479e367-b0e7-4a68-9bd8-98c8d9fad946"
        },
        {
          "taskId": "875c2a41-a382-43b3-a434-36dceb1c094f"
        },
        {
          "taskId": "3088b4d1-5490-492e-9278-35c5046455c4"
        },
        {
          "taskId": "7008cb35-ac2e-4100-8157-dadaebf38571"
        },
        {
          "taskId": "71d61029-7952-4462-8095-84255dc79dd2"
        },
        {
          "taskId": "d11d8008-5735-4f84-8212-c5f6fa049ff6"
        }
      ],
      "createdAt": "2025-09-18T01:22:34.409Z",
      "updatedAt": "2025-09-18T01:22:34.409Z",
      "relatedFiles": [
        {
          "path": "packages/coui_flutter",
          "type": "OTHER",
          "description": "전역 포맷/분석/테스트"
        }
      ],
      "implementationGuide": "1) 수정 배치 후 자동 실행 스크립트 또는 순차 명령 실행\n2) 실패 항목은 해당 배치로 롤백/수정 후 재실행",
      "verificationCriteria": "format/analyze/test 모두 성공, DCM warnings 목표 이하(가능하면 0)",
      "analysisResult": "우선순위: 1) 메모리/리스너 → 2) 타입/제네릭 → 3) 레이아웃/표현식 → 4) API 안정성 → 5) DateFormat → 6) ignore 문서화 → 7) 포맷/재분석/테스트. 각 배치는 변경 범위를 폴더/컴포넌트 단위로 작게 유지하여 회귀 위험을 줄이고, 공개 API는 deprecate 방식으로 안전 마이그레이션을 유도한다."
    }
  ]
}
